// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"sync"

	"github.com/concourse/fly/atcclient"
	"github.com/vito/go-sse/sse"
)

type FakeConnection struct {
	URLStub        func() string
	uRLMutex       sync.RWMutex
	uRLArgsForCall []struct{}
	uRLReturns struct {
		result1 string
	}
	HTTPClientStub        func() *http.Client
	hTTPClientMutex       sync.RWMutex
	hTTPClientArgsForCall []struct{}
	hTTPClientReturns struct {
		result1 *http.Client
	}
	SendStub        func(request atcclient.Request, response *atcclient.Response) error
	sendMutex       sync.RWMutex
	sendArgsForCall []struct {
		request  atcclient.Request
		response *atcclient.Response
	}
	sendReturns struct {
		result1 error
	}
	ConnectToEventStreamStub        func(request atcclient.Request) (*sse.EventSource, error)
	connectToEventStreamMutex       sync.RWMutex
	connectToEventStreamArgsForCall []struct {
		request atcclient.Request
	}
	connectToEventStreamReturns struct {
		result1 *sse.EventSource
		result2 error
	}
}

func (fake *FakeConnection) URL() string {
	fake.uRLMutex.Lock()
	fake.uRLArgsForCall = append(fake.uRLArgsForCall, struct{}{})
	fake.uRLMutex.Unlock()
	if fake.URLStub != nil {
		return fake.URLStub()
	} else {
		return fake.uRLReturns.result1
	}
}

func (fake *FakeConnection) URLCallCount() int {
	fake.uRLMutex.RLock()
	defer fake.uRLMutex.RUnlock()
	return len(fake.uRLArgsForCall)
}

func (fake *FakeConnection) URLReturns(result1 string) {
	fake.URLStub = nil
	fake.uRLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConnection) HTTPClient() *http.Client {
	fake.hTTPClientMutex.Lock()
	fake.hTTPClientArgsForCall = append(fake.hTTPClientArgsForCall, struct{}{})
	fake.hTTPClientMutex.Unlock()
	if fake.HTTPClientStub != nil {
		return fake.HTTPClientStub()
	} else {
		return fake.hTTPClientReturns.result1
	}
}

func (fake *FakeConnection) HTTPClientCallCount() int {
	fake.hTTPClientMutex.RLock()
	defer fake.hTTPClientMutex.RUnlock()
	return len(fake.hTTPClientArgsForCall)
}

func (fake *FakeConnection) HTTPClientReturns(result1 *http.Client) {
	fake.HTTPClientStub = nil
	fake.hTTPClientReturns = struct {
		result1 *http.Client
	}{result1}
}

func (fake *FakeConnection) Send(request atcclient.Request, response *atcclient.Response) error {
	fake.sendMutex.Lock()
	fake.sendArgsForCall = append(fake.sendArgsForCall, struct {
		request  atcclient.Request
		response *atcclient.Response
	}{request, response})
	fake.sendMutex.Unlock()
	if fake.SendStub != nil {
		return fake.SendStub(request, response)
	} else {
		return fake.sendReturns.result1
	}
}

func (fake *FakeConnection) SendCallCount() int {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return len(fake.sendArgsForCall)
}

func (fake *FakeConnection) SendArgsForCall(i int) (atcclient.Request, *atcclient.Response) {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return fake.sendArgsForCall[i].request, fake.sendArgsForCall[i].response
}

func (fake *FakeConnection) SendReturns(result1 error) {
	fake.SendStub = nil
	fake.sendReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnection) ConnectToEventStream(request atcclient.Request) (*sse.EventSource, error) {
	fake.connectToEventStreamMutex.Lock()
	fake.connectToEventStreamArgsForCall = append(fake.connectToEventStreamArgsForCall, struct {
		request atcclient.Request
	}{request})
	fake.connectToEventStreamMutex.Unlock()
	if fake.ConnectToEventStreamStub != nil {
		return fake.ConnectToEventStreamStub(request)
	} else {
		return fake.connectToEventStreamReturns.result1, fake.connectToEventStreamReturns.result2
	}
}

func (fake *FakeConnection) ConnectToEventStreamCallCount() int {
	fake.connectToEventStreamMutex.RLock()
	defer fake.connectToEventStreamMutex.RUnlock()
	return len(fake.connectToEventStreamArgsForCall)
}

func (fake *FakeConnection) ConnectToEventStreamArgsForCall(i int) atcclient.Request {
	fake.connectToEventStreamMutex.RLock()
	defer fake.connectToEventStreamMutex.RUnlock()
	return fake.connectToEventStreamArgsForCall[i].request
}

func (fake *FakeConnection) ConnectToEventStreamReturns(result1 *sse.EventSource, result2 error) {
	fake.ConnectToEventStreamStub = nil
	fake.connectToEventStreamReturns = struct {
		result1 *sse.EventSource
		result2 error
	}{result1, result2}
}

var _ atcclient.Connection = new(FakeConnection)
