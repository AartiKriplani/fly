// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/fly/atcclient"
	"github.com/vito/go-sse/sse"
)

type FakeClient struct {
	SendStub        func(request atcclient.Request, response *atcclient.Response) error
	sendMutex       sync.RWMutex
	sendArgsForCall []struct {
		request  atcclient.Request
		response *atcclient.Response
	}
	sendReturns struct {
		result1 error
	}
	ConnectToEventStreamStub        func(request atcclient.Request) (*sse.EventSource, error)
	connectToEventStreamMutex       sync.RWMutex
	connectToEventStreamArgsForCall []struct {
		request atcclient.Request
	}
	connectToEventStreamReturns struct {
		result1 *sse.EventSource
		result2 error
	}
}

func (fake *FakeClient) Send(request atcclient.Request, response *atcclient.Response) error {
	fake.sendMutex.Lock()
	fake.sendArgsForCall = append(fake.sendArgsForCall, struct {
		request  atcclient.Request
		response *atcclient.Response
	}{request, response})
	fake.sendMutex.Unlock()
	if fake.SendStub != nil {
		return fake.SendStub(request, response)
	} else {
		return fake.sendReturns.result1
	}
}

func (fake *FakeClient) SendCallCount() int {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return len(fake.sendArgsForCall)
}

func (fake *FakeClient) SendArgsForCall(i int) (atcclient.Request, *atcclient.Response) {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return fake.sendArgsForCall[i].request, fake.sendArgsForCall[i].response
}

func (fake *FakeClient) SendReturns(result1 error) {
	fake.SendStub = nil
	fake.sendReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) ConnectToEventStream(request atcclient.Request) (*sse.EventSource, error) {
	fake.connectToEventStreamMutex.Lock()
	fake.connectToEventStreamArgsForCall = append(fake.connectToEventStreamArgsForCall, struct {
		request atcclient.Request
	}{request})
	fake.connectToEventStreamMutex.Unlock()
	if fake.ConnectToEventStreamStub != nil {
		return fake.ConnectToEventStreamStub(request)
	} else {
		return fake.connectToEventStreamReturns.result1, fake.connectToEventStreamReturns.result2
	}
}

func (fake *FakeClient) ConnectToEventStreamCallCount() int {
	fake.connectToEventStreamMutex.RLock()
	defer fake.connectToEventStreamMutex.RUnlock()
	return len(fake.connectToEventStreamArgsForCall)
}

func (fake *FakeClient) ConnectToEventStreamArgsForCall(i int) atcclient.Request {
	fake.connectToEventStreamMutex.RLock()
	defer fake.connectToEventStreamMutex.RUnlock()
	return fake.connectToEventStreamArgsForCall[i].request
}

func (fake *FakeClient) ConnectToEventStreamReturns(result1 *sse.EventSource, result2 error) {
	fake.ConnectToEventStreamStub = nil
	fake.connectToEventStreamReturns = struct {
		result1 *sse.EventSource
		result2 error
	}{result1, result2}
}

var _ atcclient.Client = new(FakeClient)
